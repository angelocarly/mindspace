#version 450

layout ( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

layout( binding = 0, rgba8 ) uniform image2D image;
layout(std430, binding = 1 ) buffer Locations {
    int len;
    vec4 pos[];
} edges;

vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

ivec2 screen_pos(vec3 p) {
    ivec2 screenSize = imageSize( image );
    float aspect = screenSize.x / float(screenSize.y);
    p.x /= aspect;
    p += vec3(.5);
    return ivec2(p.xy * screenSize);
}

void dda_line( ivec2 p0, ivec2 p1, vec4 color )
{
    ivec2 delta = abs( p1 - p0 );
    ivec2 step = ivec2( sign( p1.x - p0.x ), sign( p1.y - p0.y ) );
    ivec2 offset = delta / 2;
    ivec2 p = p0;
    ivec2 end = p1;
    if( delta.x >= delta.y )
    {
        for( int i = 0; i < delta.x; i++ )
        {
            imageStore( image, p, color );
            offset.y += delta.y;
            if( offset.y >= delta.x )
            {
                offset.y -= delta.x;
                p.y += step.y;
            }
            p.x += step.x;
        }
    }
    else
    {
        for( int i = 0; i < delta.y; i++ )
        {
            imageStore( image, p, color );
            offset.x += delta.x;
            if( offset.x >= delta.y )
            {
                offset.x -= delta.y;
                p.x += step.x;
            }
            p.y += step.y;
        }
    }
}


void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( image );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    if( p.x >= edges.len || p.y > 1 ) return;
    int id = p.x;

    vec2 pos = vec2( float( p.x ) / float( screenSize.x ), float( p.y ) / float( screenSize.y ) ) - 0.5f;

    vec3 p1 = edges.pos[id*2].xyz;
    vec3 p2 = edges.pos[id*2+1].xyz;

    float t = .1f + 0.5f * length( pos );
    vec3 color = palette( t, vec3( 0.9, 0.1, 0.5 ), vec3( 0.5, 0.5, 0.5 ), vec3( 2.0, 1.0, 0.0 ), vec3( 0.5, 0.20, 0.25 ) );
    dda_line(screen_pos(p1), screen_pos(p2), vec4(color, 1));
    dda_line(screen_pos(p1) + ivec2(1,1), screen_pos(p2) + ivec2(1,1), vec4(color, 1));
    dda_line(screen_pos(p1) + ivec2(-1,-1), screen_pos(p2) + ivec2(-1,-1), vec4(color, 1));
    dda_line(screen_pos(p1) + ivec2(-1,1), screen_pos(p2) + ivec2(-1,1), vec4(color, 1));
    dda_line(screen_pos(p1) + ivec2(1,-1), screen_pos(p2) + ivec2(1,-1), vec4(color, 1));
}